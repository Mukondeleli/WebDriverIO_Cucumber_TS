"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getParentSuiteName = getParentSuiteName;
exports.getSessionById = getSessionById;
exports.updateBuildById = updateBuildById;
exports.updateBuildStatusForSession = updateBuildStatusForSession;
exports.updateSessionById = updateSessionById;
require("source-map-support/register");
const axios = require('axios');
const {
  version,
  appVersion,
  baseUrl,
  baseUrlApp
} = require("./constants.js");
const logger = require('./logger')(process.env.LT_API_LOG_FILE);
function getParentSuiteName(fullTitle, testSuiteTitle) {
  const fullTitleWords = fullTitle.split(' ');
  const testSuiteTitleWords = testSuiteTitle.split(' ');
  const shortestLength = Math.min(fullTitleWords.length, testSuiteTitleWords.length);
  let c = 0;
  let parentSuiteName = '';
  while (c < shortestLength && fullTitleWords[c] === testSuiteTitleWords[c]) {
    parentSuiteName += fullTitleWords[c++] + ' ';
  }
  return parentSuiteName.trim();
}
async function updateSessionById(sessionId, data, lambdaCredentials) {
  const sessionUrl = lambdaCredentials.isApp ? `${baseUrlApp}${appVersion.latestVersion}/sessions/${sessionId}` : `${baseUrl}${version.latestVersion}/sessions/${sessionId}`;
  let config = {
    method: 'patch',
    maxBodyLength: Infinity,
    url: sessionUrl,
    headers: {
      'accept': 'application/json',
      'Authorization': `Basic ${Buffer.from(lambdaCredentials.username + ':' + lambdaCredentials.accessKey).toString('base64')}`,
      'Content-Type': 'application/json'
    },
    data: data
  };
  try {
    var _response$config;
    let response = await axios.request(config);
    logger.info((response === null || response === void 0 || (_response$config = response.config) === null || _response$config === void 0 ? void 0 : _response$config.data) + (response === null || response === void 0 ? void 0 : response.data));
  } catch (error) {
    logger.error(error);
  }
}
async function updateBuildById(buildId, lambdaCredentials, status) {
  if (!buildId) return;
  const buildsUrl = lambdaCredentials.isApp ? `${baseUrlApp}${appVersion.latestVersion}/builds/${buildId}` : `${baseUrl}${version.latestVersion}/builds/${buildId}`;
  const body = {
    status
  };
  try {
    let config = {
      method: 'patch',
      maxBodyLength: Infinity,
      url: buildsUrl,
      headers: {
        'accept': 'application/json',
        'Authorization': `Basic ${Buffer.from(lambdaCredentials.username + ':' + lambdaCredentials.accessKey).toString('base64')}`,
        'Content-Type': 'application/json'
      },
      data: body
    };
    let response = await axios.request(config);
    logger.info(response === null || response === void 0 ? void 0 : response.data);
  } catch (error) {
    logger.error(error);
  }
}
async function getSessionById(sessionId, lambdaCredentials) {
  if (!sessionId) return undefined;
  const sessionUrl = lambdaCredentials !== null && lambdaCredentials !== void 0 && lambdaCredentials.isApp ? `${baseUrlApp}${appVersion.latestVersion}/sessions/${sessionId}` : `${baseUrl}${version.latestVersion}/sessions/${sessionId}`;
  try {
    const config = {
      method: 'get',
      maxBodyLength: Infinity,
      url: sessionUrl,
      headers: {
        'accept': 'application/json',
        'Authorization': `Basic ${Buffer.from(lambdaCredentials.username + ':' + lambdaCredentials.accessKey).toString('base64')}`
      }
    };
    const response = await axios.request(config);
    return response === null || response === void 0 ? void 0 : response.data;
  } catch (error) {
    logger.error(error);
    return undefined;
  }
}
async function updateBuildStatusForSession(sessionId, lambdaCredentials, exitCode) {
  try {
    var _session$data;
    const session = await getSessionById(sessionId, lambdaCredentials);
    const buildId = session === null || session === void 0 || (_session$data = session.data) === null || _session$data === void 0 ? void 0 : _session$data.build_id;
    if (!buildId) {
      logger.error('Could not determine build_id from session');
      return;
    }
    const status = exitCode === 0 ? 'passed' : 'failed';
    await updateBuildById(buildId, lambdaCredentials, status);
  } catch (error) {
    logger.error(error);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,